package co.riannreis.main;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicInteger;

import co.riannreis.entities.InterestedPerson;

public class Main {

	private static File file = new File("form.txt");
	private static Scanner sc = new Scanner(System.in);
	private static ArrayList<InterestedPerson> people = new ArrayList<>();

	public static void main(String[] args) {

		Locale.setDefault(Locale.US);

		int value;

		do {

			System.out.println("============MENU============");
			System.out.println("[ 0 ] PARA ENCERRAR O PROGRAMA");
			System.out.println("[ 1 ] PARA CADASTRAR PESSOA");
			System.out.println("[ 2 ] PARA LISTAR TODAS AS PESSOAS");
			System.out.println("[ 3 ] PARA CADASTRAR NOVA PERGUNTA");
			System.out.println("[ 4 ] PARA DELETAR PERGUNTA");
			System.out.println("[ 5 ] PESQUISAR PESSOA POR NOME OU IDADE OU EMAIL");
			System.out.println("============MENU============");
			System.out.println();

			value = Integer.parseInt(sc.nextLine());

			switch (value) {
			case 0:
				sc.close();
				System.out.println("ENCERRADO");
				break;
			case 1:
				showQuestions();
				registerInterestedPeople();
				break;
			case 2:
				System.out.println();
				listAll();
				break;
			case 3:
				System.out.println();
				registerNewQuestionToForm();
				break;
			case 4:
				System.out.println();
				deleteQuestion();
				break;
			default:
				System.out.println("Opção inválida. Tente novamente.");
				System.out.println();
			}

		} while (value != 0);

	}

	public static void registerInterestedPeople() {
		String InterestedPersonName = sc.nextLine().trim();
		String InterestedPersonEmail = sc.nextLine();
		byte InterestedPersonAge = Byte.parseByte(sc.nextLine());
		float InterestedPersonHeigth = Float.parseFloat(sc.nextLine());

		InterestedPerson interested = new InterestedPerson(InterestedPersonName, InterestedPersonEmail,
				InterestedPersonAge, InterestedPersonHeigth);

		people.add(interested);

		File saveFile = new File(
				people.indexOf(interested) + "-" + InterestedPersonName.toUpperCase().replace(" ", "") + ".txt");

		try {
			FileWriter fwOnSavedFile = new FileWriter(saveFile);

			String tempByte = String.valueOf(InterestedPersonAge);
			String tempFloat = String.valueOf(InterestedPersonHeigth);

			fwOnSavedFile.write(InterestedPersonName);
			fwOnSavedFile.write(System.lineSeparator());
			fwOnSavedFile.write(InterestedPersonEmail);
			fwOnSavedFile.write(System.lineSeparator());
			fwOnSavedFile.write(tempByte);
			fwOnSavedFile.write(System.lineSeparator());
			fwOnSavedFile.write(tempFloat);

			fwOnSavedFile.flush();
			fwOnSavedFile.close();

		} catch (IOException e) {
			e.printStackTrace();
		}

		System.out.println(interested);
	}

	public static void listAll() {

		AtomicInteger number = new AtomicInteger(0);

		people.stream().map(p -> p.getName())
				.forEach(name -> System.out.println(number.getAndIncrement() + " - " + name));
	}

	public static void registerNewQuestionToForm() {

		int lines = countLines();
		String value = String.valueOf(lines);

		System.out.println("Escreva a pergunta que deseja adicionar ao Formulário abaixo: ");

		String newQuestion = sc.nextLine();

		try {
			FileWriter fw = new FileWriter(file, true);
			fw.write(value + " - " + newQuestion);
			fw.write(System.lineSeparator());
			fw.flush();
			fw.close();

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void deleteQuestion() {

		int lines = countLines();
		int number;

		System.out.println("Insira o número da pergunta que deseja deletar: ");
		number = Integer.parseInt(sc.nextLine());

		while (number <= 4) {
			System.out.println("Pergunta Inválida! Insira outro número: ");
			number = Integer.parseInt(sc.nextLine());
		}
		
		 // PrintWriter object for output.txt
        PrintWriter pw = new PrintWriter("output.txt");
          
        // BufferedReader object for input.txt
        BufferedReader br1 = new BufferedReader(new FileReader("input.txt"));
          
        String line1 = br1.readLine();
          
        // loop for each line of input.txt
        while(line1 != null)
        {
            boolean flag = false;
              
            // BufferedReader object for delete.txt
            BufferedReader br2 = new BufferedReader(new FileReader("delete.txt"));
              
            String line2 = br2.readLine();
              
            // loop for each line of delete.txt
            while(line2 != null)
            {
                if(line1.equals(line2))
                {
                    flag = true;
                    break;
                }
                  
                line2 = br2.readLine();
            }
              
            // if flag = false
            // write line of input.txt to output.txt
            if(!flag)
                pw.println(line1);
              
            line1 = br1.readLine();
              
        }
          
        pw.flush();
          
        // closing resources
        br1.close();
        pw.close();
          
        System.out.println("File operation performed successfully");
	}

	public static void showQuestions() {

		if (!file.exists()) {

			try {
				FileWriter fw = new FileWriter(file);
				fw.write("Insert below in order:");
				fw.write(System.lineSeparator());
				fw.write("1 - Your complete name; ");
				fw.write(System.lineSeparator());
				fw.write("2 - Your email address; ");
				fw.write(System.lineSeparator());
				fw.write("3 - Your age; ");
				fw.write(System.lineSeparator());
				fw.write("4 - Your heigth (m); ");
				fw.write(System.lineSeparator());
				fw.flush();
				fw.close();

			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		try {
			FileReader fr = new FileReader(file);

			int i = 0;
			while ((i = fr.read()) != -1) {
				System.out.print((char) i);
			}

			fr.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		System.out.println();
	}

	public static int countLines() {
		int lines = 0;
		try {
			Scanner scan = new Scanner(file);
			while (scan.hasNextLine()) {
				scan.nextLine();
				lines++;
			}
			scan.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

		return lines;
	}
}
